diff --git a/uasm-lib/uasm.py b/uasm-lib/uasm.py
index 8cb98cf..21e2bba 100755
--- a/uasm-lib/uasm.py
+++ b/uasm-lib/uasm.py
@@ -1300,6 +1300,7 @@ def assemble_uop(uop, modifiers, labels, var_to_reg):
     
     src0 = operands.split(',')[0].strip() if len(operands.split(',')) > 0 else ''
     src0 = get_reg(src0)
+    print("> ", uop)
     if src0 in labels:
         src0_id = labels[src0]
         src0_is_imm = True
@@ -1498,9 +1499,16 @@ def assemble_seqword(partial_seqwords, labels, is_last):
     oooe_sync_ctrls = {"SYNCFULL": 4, "SYNCWAIT": 5, "SYNCMARK": 6, "SYNCWTMRK": 7}
     sync_ctrls = {**lfence_sync_ctrls, **oooe_sync_ctrls}
 
+    # force nop
+    force_nop = False
+    nop_not_applicable = False
+
     for uidx, _seqw in enumerate(partial_seqwords):
         for seqw in _seqw.split(", "):
-            if "GOTO" in seqw:
+            if 'NOP' == seqw:
+                force_nop = True
+
+            elif "GOTO" in seqw:
                 if tetrad_ctrl_uidx != 0x03:
                     print(f'[ERROR] invalid seqws - cannot specify tetrad_ctrl twice: {", ".join(partial_seqwords)}')
                     exit(1)
@@ -1508,6 +1516,7 @@ def assemble_seqword(partial_seqwords, labels, is_last):
                 next_uaddr = labels[next_uaddr] if next_uaddr in labels else int(next_uaddr, 16)
                 tetrad_ctrl_uidx = uidx
                 tetrad_ctrl_next_uaddr = next_uaddr
+                nop_not_applicable = True
             
             elif seqw in uop_ctrls:
                 if uop_ctrl:
@@ -1516,6 +1525,7 @@ def assemble_seqword(partial_seqwords, labels, is_last):
 
                 uop_ctrl_uidx = uidx
                 uop_ctrl = uop_ctrls[seqw]
+                nop_not_applicable = True
 
             elif seqw in sync_ctrls:
                 if sync_ctrl:
@@ -1524,6 +1534,7 @@ def assemble_seqword(partial_seqwords, labels, is_last):
                 
                 sync_ctrl_uidx = uidx
                 sync_ctrl = sync_ctrls[seqw]
+                nop_not_applicable = True
 
             elif seqw == '':
                 pass
@@ -1532,6 +1543,13 @@ def assemble_seqword(partial_seqwords, labels, is_last):
                 print(f'[ERROR] unknown seqws: "{seqw}" in {", ".join(partial_seqwords)}')
                 exit(1)
 
+    if force_nop and nop_not_applicable:
+        print(f'[ERROR] invalid seqws - cannot force NOP and specify any other sequence words.')
+        exit(1)
+    
+    if force_nop:
+        return NOP_SEQWORD
+
     seqw_bin = (sync_ctrl << 25) | (sync_ctrl_uidx << 23) | (tetrad_ctrl_next_uaddr << 8) | (tetrad_ctrl_uidx << 6) | (uop_ctrl << 2) | (uop_ctrl_uidx)
 
     # add both CRCs
@@ -1680,6 +1698,8 @@ def assemble_ucode(ucode, avoid_unk_256, output):
         tee(f'unsigned long hook_address = 0x{hook_address:04x};')
     if not hook_entry is None:
         tee(f'unsigned long hook_entry = 0x{hook_entry:02x};')
+    for k,v in labels.items():
+        tee(f'unsigned long LABEL_{k[1:-1]} = 0x{v:04x};')
     tee('unsigned long ucode_patch[][4] = {')
     for i, (triad, partial_seqwords, instruction) in enumerate(zip(triads, seqws, instructions)):
         is_last = i == len(triads)-1

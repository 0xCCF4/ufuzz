STADSTGBUF_DSZ64_ASZ16_SC1([adr_stg_r12], , r12) !m2 # save original value of r12, 13
STADSTGBUF_DSZ64_ASZ16_SC1([adr_stg_r13], , r13) !m2

# pause frontend
func lib/pause_frontend(frontend_prev, tmp)

func lib/sequencer_write(tmp, in_hook_index)

func lib/resume_frontend(frontend_prev)

# increment tracing location
[tmp] := LDSTGBUF_DSZ64_ASZ16_SC1([adr_stg_trace_result]) !m2
[tmp] := ADD_DSZ64([tmp], 0x1)
STADSTGBUF_DSZ64_ASZ16_SC1([adr_stg_trace_result], , [tmp]) !m2

# write clock value to tracing location
# [tmp]:= MOVEFROMCREG_DSZ64( , 0x2d7) !m1,m2
# STADSTGBUF_DSZ64_ASZ16_SC1([adr_stg_trace_result], , [tmp]) !m2

# restore registers
r10 := LDSTGBUF_DSZ64_ASZ16_SC1([adr_stg_r10]) !m2
r12 := LDSTGBUF_DSZ64_ASZ16_SC1([adr_stg_r12]) !m2
r13 := LDSTGBUF_DSZ64_ASZ16_SC1([adr_stg_r13]) !m2

UJMP(,[in_ucode_exit]) SEQW NOP

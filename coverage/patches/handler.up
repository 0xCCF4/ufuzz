# save remaining context
STADSTGBUF_DSZ64_ASZ16_SC1([adr_stg_r11], , r11) !m2 # save original value of r11
STADSTGBUF_DSZ64_ASZ16_SC1([adr_stg_r12], , r12) !m2 # save original value of r12
STADSTGBUF_DSZ64_ASZ16_SC1([adr_stg_r13], , r13) !m2 # save original value of r13

#                                      |--  tmp  --|
func record_coverage([in_hook_offset], r11, r12, r13)
# r11 contains the updated coverage value
func record_timestamp([in_hook_offset], r11, r12, r13)

# disables hook
#r11 := ZEROEXT_DSZ64(0x0)
#func lib/pause_frontend(r12, r11)
#func lib/ldat_write([in_hook_offset], r11, r11, 0x3) # zeros hook entry at offset [in_hook_offset]
#func lib/resume_frontend(r12)

# func lib/compute_seqw_jump(r10, r13, r11, r12)
# <- seqw now in r10

# restore context
# r10 := LDSTGBUF_DSZ64_ASZ16_SC1([adr_stg_r10]) !m2
r11 := LDSTGBUF_DSZ64_ASZ16_SC1([adr_stg_r11]) !m2
r12 := LDSTGBUF_DSZ64_ASZ16_SC1([adr_stg_r12]) !m2
r13 := LDSTGBUF_DSZ64_ASZ16_SC1([adr_stg_r13]) !m2

r10 := SHL_DSZ32(r10, 0x2) # index * 4
r10 := ADD_DSZ32(r10, <hook_exit_00>)

NOP SEQW LFNCEMARK
NOPB
NOP SEQW LFNCEWAIT

UJMP(,r10) # jump to exit hook

